         // 1.Array element sayi
            int[] array = { 1, -1, -777, 42, 654345, 0, 0, 0, 4, -777, 1, -3, -3 };
            // temporary values
            int max = array[0];
            int min = 0;

            for (int i = 0; i < array.Length; i++)
            {
                if (max < array[i]) max = array[i];
                if (min > array[i] && array[i] < 0) min = array[i];
            }

            int[] arrPositive = new int[max + 1];
            int[] arrNegative = new int[min * (-1) + 1];

            // method itself
            for (int i = 0; i < array.Length; i++)
            {
                int element = array[i];

                if (element > 0)
                {
                    arrPositive[element] += 1;
                }
                else
                {
                    arrNegative[-element] += 1;
                }
            }

            // showcase
            for (int i = arrNegative.Length - 1; i > -1; i--)
            {
                if (arrNegative[i] != 0)
                {
                    Console.WriteLine((-1) * (i) + " -> " + arrNegative[i] + " dene");
                }
            }
            for (int i = 0; i < arrPositive.Length; i++)
            {
                if (arrPositive[i] != 0)
                {
                    Console.WriteLine(i + " -> " + arrPositive[i] + " dene");
                }
            }
/*
namespace ConsoleApp1
{
    internal class Program
    {
        static void Main()
        {
            Singleton1 arrL1 = new Singleton1(1);
            arrL1.add();
            arrL1.add(4);
            arrL1.show(2);
           
        }

    }
    class Singleton1
    {
        internal class node
        {
            public node(int x = 1)
            {
                this.x = x;
            }
            
            private int x;
            public node node2;

            public int get()
            {
                return this.x;
            }
        }
        public Singleton1(int x)
        {
            this.node1 = new node(x);
            this.length = 1;
        }

        private int length;
        private node node1;

        public void iterate(out node p, int index = 0)
        {
            p = this.node1;

            for (int i = 0; i < index; i++)
            {
                p = p.node2;
            }
        }
        public void add(int x = 0)
        {

            this.iterate(out node lastNode, length - 1);
            this.length = this.length + 1;

            lastNode.node2 = new node(x);
        }
        public void show(int index = 0)
        {
            if (index < 0 || index >= this.length)
            {
                Console.WriteLine("error");
            }
            else
            {
                this.iterate(out node lastNode, index);
                Console.WriteLine(lastNode.get());
            }
        }
    }
}
*/